@using IMAR_DialogoOperatore.Application
@using IMAR_DialogoOperatore.Application.Interfaces.Utilities
@using IMAR_DialogoOperatore.Components.SubComponents
@using IMAR_DialogoOperatore.Interfaces.Observers
@using IMAR_DialogoOperatore.ViewModels

@inject PopupDiConfermaViewModel PopupDiConfermaViewModel
@inject IDialogoOperatoreObserver DialogoOperatoreObserver
@inject IAutoLogoutUtility AutoLogoutUtility

<DxPopup @bind-Visible="@PopupDiConfermaViewModel.IsVisible"
		 ShowFooter="true"
		 Width="35%"
		 @onkeydown="RestartAutoLogoutTimer"
		 @onclick="RestartAutoLogoutTimer"
		 @onmousemove="RestartAutoLogoutTimer"
		 @onmousedown="RestartAutoLogoutTimer">
	<BodyContentTemplate>
		<div style="white-space:pre-line;"
			 class="testo-medio">
			@PopupDiConfermaViewModel.Testo
		</div>

		<FormSegnalazioneDifformita OnStateChanged="@PopupDiConfermaViewModel_NotifyStateChanged" />
	</BodyContentTemplate>

	<FooterContentTemplate>
		<DxButton Text="Annulla"
				  Click="@AnnullaHandler"
				  RenderStyle="ButtonRenderStyle.Warning"
				  RenderStyleMode="ButtonRenderStyleMode.Outline"
				  CssClass="d-flex justify-content-center align-items-center conferma-dettagli" />

		<DxButton Text="Conferma"
				  Click="@ConfermaHandler"
				  Enabled="PopupDiConfermaViewModel.RispostaPopupDiConfermaCommand.CanExecute(null)"
				  RenderStyle="ButtonRenderStyle.Warning"
				  CssClass="d-flex justify-content-center align-items-center conferma-dettagli" />
	</FooterContentTemplate>
</DxPopup>

@code {
	protected override Task OnInitializedAsync()
	{
		PopupDiConfermaViewModel.NotifyStateChanged += PopupDiConfermaViewModel_NotifyStateChanged;

		return base.OnInitializedAsync();
	}

	private async void PopupDiConfermaViewModel_NotifyStateChanged()
	{
		await InvokeAsync(StateHasChanged);
	}

	private void RestartAutoLogoutTimer()
	{
		if (isRestartTimerActive())
			AutoLogoutUtility.RestartTimer();
	}

	private bool isRestartTimerActive()
	{
		return AutoLogoutUtility.IsActive &&
			   DialogoOperatoreObserver.OperatoreSelezionato != null &&
			   DialogoOperatoreObserver.OperatoreSelezionato.Stato != Costanti.ASSENTE &&
			   DialogoOperatoreObserver.OperatoreSelezionato.Stato != Costanti.IN_PAUSA;
	}

	void AnnullaHandler()
	{
		PopupDiConfermaViewModel.RispostaPopupDiConfermaCommand.Execute(false);
	}

	void ConfermaHandler()
	{
		PopupDiConfermaViewModel.RispostaPopupDiConfermaCommand.Execute(true);
	}
}

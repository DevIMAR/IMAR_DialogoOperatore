@using IMAR_DialogoOperatore.ViewModels

@inject GestoreAttivitaViewModel GestoreAttivitaViewModel

<DxDrawer IsOpen="@IsOpen"
		  Position="DrawerPosition.Right"
		  Mode="DrawerMode.Overlap"
		  PanelWidth="35%"
		  CloseOnTargetContentClick="false">
	<HeaderTemplate>
		<div class="testo-grande">
			Operazione: @GestoreAttivitaViewModel.OperazioneInCorso
		</div>
	</HeaderTemplate>

	<BodyTemplate>
		<AttivitaDetails @ref="@AttivitaDetails"
						 WorkDoneCallback="@GestoreAttivitaViewModel.ConfermaCommand.Execute" />
	</BodyTemplate>

	<FooterTemplate>
		<DxButton Text="Conferma"
				  RenderStyle="ButtonRenderStyle.Warning"
				  Enabled="@GestoreAttivitaViewModel.ConfermaCommand.CanExecute(null)"
				  Click="@GestoreAttivitaViewModel.ConfermaCommand.Execute"
				  CssClass="d-flex justify-content-center align-items-center conferma-dettagli" />
	</FooterTemplate>

	<TargetContent>
		<AttivitaGrid />
	</TargetContent>
</DxDrawer>

@code {
	public bool IsOpen => GestoreAttivitaViewModel.IsOpen;

	public AttivitaDetails AttivitaDetails { get; set; }

	protected override Task OnInitializedAsync()
	{
		GestoreAttivitaViewModel.NotifyStateChanged += GestoreAttivitaViewModel_NotifyStateChanged;

		return base.OnInitializedAsync();
	}

	private async void GestoreAttivitaViewModel_NotifyStateChanged()
	{
		await InvokeAsync(StateHasChanged);
	}
}

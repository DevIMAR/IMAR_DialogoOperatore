@using IMAR_DialogoOperatore.Interfaces.Observers
@using IMAR_DialogoOperatore.ViewModels

@inject InfoOperatoreViewModel InfoOperatoreViewModel
@inject IDialogoOperatoreObserver DialogoOperatoreObserver

<DxGridLayout>
	<Columns>
		<DxGridLayoutColumn Width="auto" />
		<DxGridLayoutColumn />
	</Columns>

	<Items>
		<DxGridLayoutItem Column="0">
			<Template>
				<div style="display:flex;">
					<div style="margin-right:5px">
						OPERATORE
					</div>

					<DxSpinEdit style="width:4vw;"
								CssClass="testo-grande"
								@bind-Value="@InfoOperatoreViewModel.Badge"
								Enabled="@InfoOperatoreViewModel.IsBadgeEditable"
								ShowSpinButtons="false"
								@ref="@Badge" />
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Column="1"
						  Visible="@InfoOperatoreViewModel.IsInfoVisible">
			<Template>
				<div style="display:flex;"
					 class="ml-20">
					<div>
						<strong>
							@InfoOperatoreViewModel.NomeCognome
						</strong>
					</div>

					<div class="ml-20">
						STATO:
					</div>

					<div class="ml-5">
						<strong>
							@InfoOperatoreViewModel.Stato
						</strong>
					</div>
				</div>
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	private DxSpinEdit<int?> Badge;

	protected override Task OnInitializedAsync()
	{
		InfoOperatoreViewModel.NotifyStateChanged += InfoOperatoreViewModel_NotifyStateChanged;

		return base.OnInitializedAsync();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		SetFocus();

		base.OnAfterRender(firstRender);
	}

	private async void InfoOperatoreViewModel_NotifyStateChanged()
	{
		SetFocus();

		await InvokeAsync(StateHasChanged);
	}

	private void SetFocus()
	{
		try
		{
			if (Badge.Enabled)
			{
				Thread.Sleep(50);
				Badge.FocusAsync();
			}
		}
		catch
		{

		}
	}
}

@using IMAR_DialogoOperatore.Interfaces.Observers
@using IMAR_DialogoOperatore.ViewModels

@inject InfoOperatoreViewModel InfoOperatoreViewModel
@inject IDialogoOperatoreObserver DialogoOperatoreObserver

<DxGridLayout style="font-size:2.5vh"
			  class="d-flex justify-content-center align-items-center">
	<Rows>
		<DxGridLayoutRow Height="25%" />
		<DxGridLayoutRow Height="70%" />
		<DxGridLayoutRow Height="5%" />
	</Rows>
	<Columns>
		<DxGridLayoutColumn Width="auto" />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn Width="50%" />
	</Columns>

	<Items>
		<DxGridLayoutItem Row="1" Column="0">
			<Template>
				<div style="display:flex;">
					<div style="margin-right:5px">
						OPERATORE
					</div>

					<DxSpinEdit style="font-size:2.5vh;
									  width:4vw;
									  --dxbl-text-edit-font-size: 2.5vh;
									  --dxbl-text-edit-line-height: 0vh;
									  --dxbl-text-edit-padding-x: 0.2vw;
									  --dxbl-text-edit-padding-y: 0vh;"
								@bind-Value="@InfoOperatoreViewModel.Badge"
								Enabled="@InfoOperatoreViewModel.IsBadgeEditable"
								ShowSpinButtons="false"
								
								@ref="@Badge" />
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1" Column="1"
						  Visible="@InfoOperatoreViewModel.IsInfoVisible">
			<Template>
				<div style="display:flex; margin-left:20px">
					<div style="font-weight:bold;">
						@InfoOperatoreViewModel.NomeCognome
					</div>

					<div style="margin-left:20px">
						STATO:
					</div>

					<div style="font-weight:bold; margin-left:5px">
						@InfoOperatoreViewModel.Stato
					</div>
				</div>
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	private DxSpinEdit<int?> Badge;

	protected override Task OnInitializedAsync()
	{
		InfoOperatoreViewModel.NotifyStateChanged += InfoOperatoreViewModel_NotifyStateChanged;
		DialogoOperatoreObserver.OnAttivitaSelezionataChanged += DialogoOperatoreObserver_OnIsDettaglioAttivitaOpenChanged;

		return base.OnInitializedAsync();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		SetFocus();

		base.OnAfterRender(firstRender);
	}

	private async void InfoOperatoreViewModel_NotifyStateChanged()
	{
		SetFocus();

		await InvokeAsync(StateHasChanged);
	}

	private void DialogoOperatoreObserver_OnIsDettaglioAttivitaOpenChanged()
	{
		SetFocus();
	}

	private void SetFocus()
	{
		try
		{
			if (DialogoOperatoreObserver.IsDettaglioAttivitaOpen == false)
			{
				Thread.Sleep(50);
				Badge.FocusAsync();
			}
		}
		catch
		{

		}
	}
}

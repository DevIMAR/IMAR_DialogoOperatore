@using IMAR_DialogoOperatore.ViewModels

@inject HeaderToolbarViewModel HeaderToolbarViewModel

<DxGridLayout class="testo-grande">
	<Rows>
		<DxGridLayoutRow Height="25%" />
		<DxGridLayoutRow Height="70%" />
		<DxGridLayoutRow Height="5%" />
	</Rows>

	<Columns>
		<DxGridLayoutColumn />
		<DxGridLayoutColumn Width="auto" />
		<DxGridLayoutColumn />
	</Columns>

	<Items>
		<DxGridLayoutItem Row="1" Column="0">
			<Template>
				<InfoOperatoreView />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1" Column="1">
			<Template>
				<Clock />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1" Column="2">
			<Template>
				<div style="display: flex; justify-content: flex-end; align-items: center;">
					<DxButton RenderStyle="ButtonRenderStyle.Warning"
							  RenderStyleMode="ButtonRenderStyleMode.Outline"
							  IconCssClass="icon icon-timer" 
							  Click="@HeaderToolbarViewModel.ShowEntrateUscitePauseCommand.Execute"
							  Enabled="@HeaderToolbarViewModel.ShowEntrateUscitePauseCommand.CanExecute(null)"
							  title="Mostra timbrature" />

					@* <DxButton RenderStyle="ButtonRenderStyle.Warning"
							  RenderStyleMode="ButtonRenderStyleMode.Outline"
							  IconCssClass="icon icon-sendWarning" 
							  Click="@(() => HeaderToolbarViewModel.ShowTaskPopupCommand.Execute(true))"
							  Enabled="@HeaderToolbarViewModel.ShowTaskPopupCommand.CanExecute(null)"
							  title="Invio notifica errore" /> *@
				</div>
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	protected override void OnInitialized()
	{
		HeaderToolbarViewModel.NotifyStateChanged += HeaderToolbarViewModel_NotifyStateChanged;
		base.OnInitialized();
	}

	private async void HeaderToolbarViewModel_NotifyStateChanged() => await InvokeAsync(StateHasChanged);
}

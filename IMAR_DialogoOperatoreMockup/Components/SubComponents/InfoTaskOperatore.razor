@using DevExpress.Blazor.Internal
@using IMAR_DialogoOperatore.ViewModels

@inject InfoTaskOperatoreViewModel InfoTaskOperatoreViewModel

<DxGridLayout>
	<Columns>
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
	</Columns>

	<Items>
		<DxGridLayoutItem Column="0" ColumnSpan="3">
			<Template>
				<div class="d-flex align-items-center h-100 testo-piccolo mt-2">
					<label>ORARIO DA DICHIARARE (hh:mm)</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Column="3" ColumnSpan="1">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-grande mt-2">
					<DxSpinEdit @bind-Value="@InfoTaskOperatoreViewModel.OraDaDichiarare"
								MinValue="00"
								MaxValue="24"
								ShowSpinButtons="false"
								CssClass="dxbl-text-edit"
								@onkeydown="HandleOraKeyPress" />
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Column="4" ColumnSpan="1">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-grande mt-2">
					<label>:</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Column="5" ColumnSpan="1">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-grande mt-2">
					<DxSpinEdit @bind-Value="@InfoTaskOperatoreViewModel.MinutoDaDichiarare"
								MinValue="00"
								MaxValue="59"
								ShowSpinButtons="false"
								CssClass="dxbl-text-edit"
								@ref="Minuto"
								@onkeydown="HandleMinutoKeyPress" />
				</div>
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	[Parameter] public EventCallback OrarioAggiunto { get; set; }

	private DxSpinEdit<int> Minuto;

	protected override void OnInitialized()
	{
		InfoTaskOperatoreViewModel.NotifyStateChanged += InfoTaskOperatoreViewModel_NotifyStateChanged;
		base.OnInitialized();
	}

	private async void InfoTaskOperatoreViewModel_NotifyStateChanged() => await InvokeAsync(StateHasChanged);

	private async void SetFocus(IFocusableEditor element)
	{
		try
		{
			await Task.Delay(10);
			await element.FocusAsync();
		}
		catch
		{

		}
	}

	private void HandleOraKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				SetFocus(Minuto);
				break;
		}
	}

	private void HandleMinutoKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				OrarioAggiunto.InvokeAsync();
				break;
		}
	}
}

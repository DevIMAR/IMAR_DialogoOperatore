@using DevExpress.Blazor.Internal
@using IMAR_DialogoOperatore.Interfaces.Observers
@using IMAR_DialogoOperatore.ViewModels
@using System.Text

@inject AttivitaDetailsViewModel AttivitaDetailsViewModel
@inject IDialogoOperatoreObserver DialogoOperatoreObserver
@inject IJSRuntime JSRuntime

<DxGridLayout CssClass="testo-medio">
	<Rows>
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
		<DxGridLayoutRow />
	</Rows>
	<Columns>
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
	</Columns>

	<Items>
		<DxGridLayoutItem Row="0"
						  Column="1" ColumnSpan="5">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>BOLLA</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="0"
						  Column="6" ColumnSpan="5">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>ODP</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1"
						  Column="1" ColumnSpan="5">
			<Template>
				<DxMaskedInput @bind-Value="@(AttivitaDetailsViewModel.Bolla)"
							   BindValueMode="BindValueMode.OnInput"
							   Mask="000000"
							   MaskMode="MaskMode.Numeric"
							   CssClass="dxbl-text-edit"
							   @ref="@BollaRef"
							   @onkeydown="HandleBollaKeyPress"
							   @onclick="@(() => BollaHasFocus = true)"
							   inputmode="text"
							   enterkeyhint="enter">
					<Buttons>
						<DxEditorButton Text="Ind"
										Tooltip="Apri indiretta"
										Click="AttivitaDetailsViewModel.ApriListaIndirette.Execute"
										Enabled="AttivitaDetailsViewModel.ApriListaIndirette.CanExecute(null)" />
					</Buttons>
				</DxMaskedInput>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1"
						  Column="6" ColumnSpan="5">
			<Template>
				<DxMaskedInput @bind-Value="@(AttivitaDetailsViewModel.Odp)"
							   BindValueMode="BindValueMode.OnInput"
							   Mask="00000000"
							   MaskMode="MaskMode.Numeric"
							   CssClass="dxbl-text-edit"
							   @ref="@OdpRef"
							   @onkeydown="HandleOdpKeyPress"
							   @onclick="@(() => BollaHasFocus = false)"
							   inputmode="text"
							   enterkeyhint="enter">
				</DxMaskedInput>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="2"
						  Column="1" ColumnSpan="5">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>ARTICOLO</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="2"
						  Column="6" ColumnSpan="5">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>FASE</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="3"
						  Column="1" ColumnSpan="5">
			<Template>
				<DxTextBox Enabled="false"
						   Text="@(AttivitaDetailsViewModel.Articolo)"
						   CssClass="dxbl-text-edit" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="3"
						  Column="6" ColumnSpan="5">
			<Template>
				<DxComboBox Data="@AttivitaDetailsViewModel.FasiPerAttivita"
							@bind-Value="@(AttivitaDetailsViewModel.FaseSelezionata)"
							Enabled="@(AttivitaDetailsViewModel.FasiPerAttivita != null && AttivitaDetailsViewModel.FasiPerAttivita.Count() != 0)"
							CssClass="dxbl-text-edit"
							@ref="@FasiRef"
							@onkeydown="HandleFaseKeyPress"
							@onclick="@(() => BollaHasFocus = false)" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="4"
						  Column="1" ColumnSpan="10">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>DESCRIZIONE ARTICOLO</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="5"
						  Column="1" ColumnSpan="10">
			<Template>
				<DxTextBox Text="@(AttivitaDetailsViewModel.DescrizioneArticolo)"
						   Enabled="false"
						   CssClass="dxbl-text-edit" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="6"
						  Column="1" ColumnSpan="10">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>DESCRIZIONE FASE</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="7"
						  Column="1" ColumnSpan="10">
			<Template>
				<DxTextBox Text="@(AttivitaDetailsViewModel.DescrizioneFase)"
						   Enabled="false"
						   CssClass="dxbl-text-edit" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="8" RowSpan="3"
						  Column="1" ColumnSpan="2">
			<Template>
				<DxProgressBar Type="ProgressBarType.Circular"
							   MaxValue="@AttivitaDetailsViewModel.QuantitaOrdine"
							   Value="@AttivitaDetailsViewModel.QuantitaProdottaPrecedentemente"
							   Size="10dvh"
							   Thickness="8px"
							   Label="@AttivitaDetailsViewModel.CompletamentoFase"
							   LabelPosition="ProgressBarLabelPosition.Top"
							   ShowLabel="true" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="8"
						  Column="4" ColumnSpan="5">
			<Template>
				<div class="d-flex h-100 testo-medio">
					<label>Qt. RESIDUA: @AttivitaDetailsViewModel.QuantitaResidua</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="9"
						  Column="4" ColumnSpan="5">
			<Template>
				<div class="d-flex h-100 testo-medio">
					<label>Qt. SCARTATA TOTALE: @AttivitaDetailsViewModel.QuantitaScartataTotale</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="10"
						  Column="4" ColumnSpan="5">
			<Template>
				<div class="d-flex h-100 testo-medio">
					<label>@AttivitaDetailsViewModel.StatoAttivita</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="11" RowSpan="3"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsAvanzamento">
			<Template>
				<AvanzamentoAttivitaView DatiAvanzamentoInseriti="@DatiAvanzamentoInseriti"
										 Click="@(() => BollaHasFocus = false)"
										 @ref="@Avanzamento" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="14"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttrezzaggio">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>APRI COME LAVORO</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="15"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttrezzaggio">
			<Template>
				<DxCheckBox CheckType="CheckType.Switch"
							@bind-Checked="@AttivitaDetailsViewModel.IsAperturaLavoroAutomaticaAttiva"
							LabelPosition="LabelPosition.Left"
							Alignment="CheckBoxContentAlignment.Center"
							SizeMode="SizeMode.Large"
							CssClass="testo-medio"
							@ref="@InizioLavoro"
							@onkeydown="HandleInizioLavoroKeyPress"
							@onclick="@(() => BollaHasFocus = false)" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="14"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttivitaInUscita">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>ATTIVA RIAPERTURA AUTOMATICA</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="15"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttivitaInUscita">
			<Template>
				<DxCheckBox CheckType="CheckType.Switch"
							@bind-Checked="@AttivitaDetailsViewModel.IsRiaperturaAttiva"
							LabelPosition="LabelPosition.Left"
							Alignment="CheckBoxContentAlignment.Center"
							SizeMode="SizeMode.Large"
							CssClass="testo-medio"
							@ref="@Riapertura"
							@onkeydown="HandleRiaperturaKeyPress"
							@onclick="@(() => BollaHasFocus = false)" />
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	[Parameter] public EventCallback WorkDoneCallback { get; set; }

	private DxMaskedInput<string?> BollaRef;
	private DxMaskedInput<string?> OdpRef;
	private DxComboBox<string, string> FasiRef;
	private AvanzamentoAttivitaView Avanzamento;
	private DxCheckBox<bool> Riapertura;
	private DxCheckBox<bool> InizioLavoro;

	public bool BollaHasFocus { get; set; }

	protected override Task OnInitializedAsync()
	{
		BollaHasFocus = true;

		AttivitaDetailsViewModel.NotifyStateChanged += AttivitaDetailsViewModel_NotifyStateChanged;
		DialogoOperatoreObserver.OnIsDettaglioAttivitaOpenChanged += DialogoOperatoreObserver_OnIsDettaglioAttivitaOpenChanged;

		return base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (BollaHasFocus)
			SetFocus(BollaRef);

		await base.OnAfterRenderAsync(firstRender);
	}

	private async void AttivitaDetailsViewModel_NotifyStateChanged()
	{
		await InvokeAsync(StateHasChanged);
	}

	private void DialogoOperatoreObserver_OnIsDettaglioAttivitaOpenChanged()
	{
		if (DialogoOperatoreObserver.IsDettaglioAttivitaOpen)
			return;

		BollaHasFocus = true;
	}

	private async void SetFocus(IFocusableEditor element)
	{
		try
		{
			if (!DialogoOperatoreObserver.IsDettaglioAttivitaOpen)
				return;

			await Task.Delay(20);
			await element.FocusAsync();
		}
		catch
		{

		}
	}

	private async void HandleBollaKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":

				TriggerRicercaAttivitaDaBolla();

				await SetFocusToFasi();
				break;

			case "Tab":
				BollaHasFocus = false;
				SetFocus(OdpRef);
				break;
		}
	}

	private void TriggerRicercaAttivitaDaBolla()
	{
		if (string.IsNullOrWhiteSpace(BollaRef.Value))
			return;

		string bollaCercata = BollaRef.Value != null ? BollaRef.Value.ToString() : string.Empty;
		AttivitaDetailsViewModel.Odp = string.Empty;

		AttivitaDetailsViewModel.CercaAttivitaHelper.CercaAttivitaDaBolla(bollaCercata);
	}

	private async void HandleOdpKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				TriggerRicercaAttivitaDaOdp();

				await SetFocusToFasi();
				break;

			case "Tab":
				BollaHasFocus = true;
				SetFocus(BollaRef);
				break;
		}
	}

	private void TriggerRicercaAttivitaDaOdp()
	{
		string odpCercato = OdpRef.Value != null ? OdpRef.Value.ToString() : string.Empty;
		AttivitaDetailsViewModel.Bolla = string.Empty;

		AttivitaDetailsViewModel.CercaAttivitaHelper.CercaAttivitaDaOdp(odpCercato);
	}

	private async Task SetFocusToFasi()
	{
		await Task.Delay(10);

		if (FasiRef.Data.Count() != 0)
		{
			BollaHasFocus = false;
			SetFocus(FasiRef);
		}
	}

	private async void HandleFaseKeyPress(KeyboardEventArgs e)
	{
		List<string> listaFasi = AttivitaDetailsViewModel.FasiPerAttivita.ToList();

		int index = listaFasi.IndexOf(AttivitaDetailsViewModel.FaseSelezionata);

		switch (e.Key)
		{
			case "ArrowUp":
				if (listaFasi.Count <= 1)
					return;
				AttivitaDetailsViewModel.FaseSelezionata = index > 0 ? listaFasi[index - 1] : listaFasi[index];
				SetFocus(FasiRef);
				break;

			case "ArrowDown":
				if (listaFasi.Count <= 1)
					return;
				AttivitaDetailsViewModel.FaseSelezionata = index < listaFasi.Count - 1 ? listaFasi[index + 1] : listaFasi[index];
				SetFocus(FasiRef);
				break;

			case "Enter":
				if (AttivitaDetailsViewModel.IsAvanzamento)
					SetFocus(Avanzamento.Prodotta);
				else if (AttivitaDetailsViewModel.IsFineAttrezzaggio)
					SetFocus(InizioLavoro);
				else if (AttivitaDetailsViewModel.IsFineAttivitaInUscita)
					SetFocus(Riapertura);
				else
					await WorkDoneCallback.InvokeAsync();
				break;
		}
	}

	private async void DatiAvanzamentoInseriti()
	{
		if (AttivitaDetailsViewModel.IsFineAttivitaInUscita)
			SetFocus(Riapertura);
		else
			await WorkDoneCallback.InvokeAsync();
	}

	private async void HandleInizioLavoroKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				await WorkDoneCallback.InvokeAsync();
				break;
			case "ArrowRight":
				AttivitaDetailsViewModel.IsAperturaLavoroAutomaticaAttiva = true;
				break;
			case "ArrowLeft":
				AttivitaDetailsViewModel.IsAperturaLavoroAutomaticaAttiva = false;
				break;
		}
	}

	private async void HandleRiaperturaKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				await WorkDoneCallback.InvokeAsync();
				break;
			case "ArrowRight":
				AttivitaDetailsViewModel.IsRiaperturaAttiva = true;
				break;
			case "ArrowLeft":
				AttivitaDetailsViewModel.IsRiaperturaAttiva = false;
				break;
		}
	}
}

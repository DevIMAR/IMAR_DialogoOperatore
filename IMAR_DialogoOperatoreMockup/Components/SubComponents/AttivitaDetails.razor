@using DevExpress.Blazor.Internal
@using IMAR_DialogoOperatore.Interfaces.Observers
@using IMAR_DialogoOperatore.ViewModels
@using System.Text

@inject AttivitaDetailsViewModel AttivitaDetailsViewModel
@inject IDialogoOperatoreObserver DialogoOperatoreObserver
@inject IJSRuntime JSRuntime

<DxGridLayout CssClass="testo-medio">
	<Rows>
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow />
	</Rows>
	<Columns>
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
	</Columns>

	<Items>
		<DxGridLayoutItem Row="0"
						  Column="1" ColumnSpan="10">
			<Template>
				<InfoBaseAttivita InfoBaseInserite="@InfoBaseInserite"
								  ShowArticolo="true"
								  ShowDescrizioni="true"
								  ShowBottoneIndirette="true" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1" RowSpan="3"
						  Column="1" ColumnSpan="2">
			<Template>
				<DxProgressBar Type="ProgressBarType.Horizontal"
							   MaxValue="@AttivitaDetailsViewModel.QuantitaOrdine"
							   Value="@AttivitaDetailsViewModel.QuantitaProdottaPrecedentemente"
							   Size="12dvw"
							   Thickness="2dvh"
							   Label="@AttivitaDetailsViewModel.CompletamentoFase"
							   LabelPosition="ProgressBarLabelPosition.Top"
							   ShowLabel="true" 
							   CssClass="mt-2" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1"
						  Column="6" ColumnSpan="5">
			<Template>
				<div class="d-flex h-100 testo-medio mt-2">
					<label>Qt. RESIDUA: @AttivitaDetailsViewModel.QuantitaResidua</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="2"
						  Column="6" ColumnSpan="5">
			<Template>
				<div class="d-flex h-100 testo-medio">
					<label>Qt. SCARTATA TOTALE: @AttivitaDetailsViewModel.QuantitaScartataTotale</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="3"
						  Column="6" ColumnSpan="5">
			<Template>
				<div class="d-flex h-100 testo-medio">
					<label>@AttivitaDetailsViewModel.StatoAttivita</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="4"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsAvanzamento">
			<Template>
				<AvanzamentoAttivitaView DatiAvanzamentoInseriti="@DatiAvanzamentoInseriti"
										 @ref="@Avanzamento" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="5"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttrezzaggio">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>APRI COME LAVORO</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="6"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttrezzaggio">
			<Template>
				<DxCheckBox CheckType="CheckType.Switch"
							@bind-Checked="@AttivitaDetailsViewModel.IsAperturaLavoroAutomaticaAttiva"
							LabelPosition="LabelPosition.Left"
							Alignment="CheckBoxContentAlignment.Center"
							SizeMode="SizeMode.Large"
							CssClass="testo-medio"
							@ref="@InizioLavoro"
							@onkeydown="HandleInizioLavoroKeyPress" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="5"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttivitaInUscita">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 testo-medio">
					<label>ATTIVA RIAPERTURA AUTOMATICA</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="6"
						  Column="1" ColumnSpan="10"
						  Visible="@AttivitaDetailsViewModel.IsFineAttivitaInUscita">
			<Template>
				<DxCheckBox CheckType="CheckType.Switch"
							@bind-Checked="@AttivitaDetailsViewModel.IsRiaperturaAttiva"
							LabelPosition="LabelPosition.Left"
							Alignment="CheckBoxContentAlignment.Center"
							SizeMode="SizeMode.Large"
							CssClass="testo-medio"
							@ref="@Riapertura"
							@onkeydown="HandleRiaperturaKeyPress" />
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	[Parameter] public EventCallback WorkDoneCallback { get; set; }

	private DxMaskedInput<string?> BollaRef;
	private DxMaskedInput<string?> OdpRef;
	private DxComboBox<string, string> FasiRef;
	private AvanzamentoAttivitaView Avanzamento;
	private DxCheckBox<bool> Riapertura;
	private DxCheckBox<bool> InizioLavoro;

	protected override Task OnInitializedAsync()
	{
		AttivitaDetailsViewModel.NotifyStateChanged += AttivitaDetailsViewModel_NotifyStateChanged;

		return base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
			await SetFocus(BollaRef);

		await base.OnAfterRenderAsync(firstRender);
	}

	private async void AttivitaDetailsViewModel_NotifyStateChanged()
	{
		await InvokeAsync(StateHasChanged);
	}

	private async Task SetFocus(IFocusableEditor element)
	{
		try
		{
			if (!DialogoOperatoreObserver.IsDettaglioAttivitaOpen)
				return;

			await Task.Delay(20);
			await element.FocusAsync();
		}
		catch
		{

		}
	}

	private async void InfoBaseInserite()
	{
		if (AttivitaDetailsViewModel.IsAvanzamento)
			await SetFocus(Avanzamento.Prodotta);
		else if (AttivitaDetailsViewModel.IsFineAttrezzaggio)
			await SetFocus(InizioLavoro);
		else if (AttivitaDetailsViewModel.IsFineAttivitaInUscita)
			await SetFocus(Riapertura);
		else
			await WorkDoneCallback.InvokeAsync();
	}

	private async void DatiAvanzamentoInseriti()
	{
		if (AttivitaDetailsViewModel.IsFineAttivitaInUscita)
			await SetFocus(Riapertura);
		else
			await WorkDoneCallback.InvokeAsync();
	}

	private async void HandleInizioLavoroKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				await WorkDoneCallback.InvokeAsync();
				break;
			case "ArrowRight":
				AttivitaDetailsViewModel.IsAperturaLavoroAutomaticaAttiva = true;
				break;
			case "ArrowLeft":
				AttivitaDetailsViewModel.IsAperturaLavoroAutomaticaAttiva = false;
				break;
		}
	}

	private async void HandleRiaperturaKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				await WorkDoneCallback.InvokeAsync();
				break;
			case "ArrowRight":
				AttivitaDetailsViewModel.IsRiaperturaAttiva = true;
				break;
			case "ArrowLeft":
				AttivitaDetailsViewModel.IsRiaperturaAttiva = false;
				break;
		}
	}
}

@using DevExpress.Blazor.Base
@using IMAR_DialogoOperatore.Interfaces.Observers
@using IMAR_DialogoOperatore.ViewModels

@inject AttivitaGridViewModel AttivitaGridViewModel
@inject IDialogoOperatoreObserver DialogoOperatoreObserver
@inject IJSRuntime JSRuntime

<div tabindex="1">
	<DxGrid @bind-Data="@AttivitaGridViewModel.Attivita"
			AllowSort="false"
			AllowSelectRowByClick="true"
			SelectionMode="GridSelectionMode.Single"
			@bind-SelectedDataItem="@AttivitaGridViewModel.AttivitaSelezionata"
			PageSize="25"
			style="--dxbl-grid-font-size:1.668vh;"
			@ref="Grid"
			id="grid-id">
		<Columns>
			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.Causale))"
							  Caption=" "
							  TextAlignment="GridTextAlignment.Center"
							  Width="3%">
			</DxGridDataColumn>

			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.Odp))"
							  Caption="Odp"
							  TextAlignment="GridTextAlignment.Left"
							  Width="7%"
							  Name="odp"
							  SortIndex="1">
				<CellDisplayTemplate>
					@{
						AttivitaViewModel itemRow = (AttivitaViewModel)context.DataItem;

						if (itemRow.Odp != null && !itemRow.Odp.Equals(string.Empty))
						{
							<DocumentaleView ProprietaDaCercare="odp" Codice="@itemRow.Odp" ShowIcon="false" />
						}
					}
				</CellDisplayTemplate>
			</DxGridDataColumn>

			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.Articolo))"
							  Caption="Articolo"
							  TextAlignment="GridTextAlignment.Left"
							  Width="13%">
				<CellDisplayTemplate>
					@{
						AttivitaViewModel itemRow = (AttivitaViewModel)context.DataItem;

						if (itemRow.Articolo != null && !itemRow.Articolo.Equals(string.Empty))
						{
							<DocumentaleView ProprietaDaCercare="articolo" Codice="@itemRow.Articolo" ShowIcon="false" />
						}
					}
				</CellDisplayTemplate>
			</DxGridDataColumn>

			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.DescrizioneArticolo))"
							  Caption="Desc. Articolo"
							  TextAlignment="GridTextAlignment.Left"
							  Width="31%">
			</DxGridDataColumn>

			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.Fase))"
							  Caption="Fase"
							  TextAlignment="GridTextAlignment.Left"
							  Width="5%"
							  SortIndex="2">
			</DxGridDataColumn>

			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.DescrizioneFase))"
							  Caption="Desc. Fase"
							  TextAlignment="GridTextAlignment.Left"
							  Width="31%">
			</DxGridDataColumn>

			<DxGridDataColumn FieldName="@(nameof(AttivitaViewModel.QuantitaProdotta))"
							  Caption="Completamento"
							  TextAlignment="GridTextAlignment.Left"
							  Width="10%">
				<CellDisplayTemplate>
					<div style="text-align: left;">
						<div style="vertical-align: middle;
									display: inline-block;">
							<DxProgressBar Type="ProgressBarType.Horizontal"
										   Value="Convert.ToDouble(context.Value)"
										   MaxValue="((AttivitaViewModel)context.DataItem).QuantitaOrdine"
										   Size="10vh"
										   Thickness="10px"
										   ShowLabel="false" />
						</div>

						<div style="vertical-align: middle;
									display: inline-block;">
							@(Convert.ToDouble(context.Value) + "/" + ((AttivitaViewModel)context.DataItem).QuantitaOrdine)
						</div>
					</div>
				</CellDisplayTemplate>
			</DxGridDataColumn>
		</Columns>
	</DxGrid>
</div>

@code {
	private DxGrid Grid;
	bool focusGrid = false;

	protected override Task OnInitializedAsync()
	{
		AttivitaGridViewModel.NotifyStateChanged += AttivitaGridViewModel_NotifyStateChanged;
		DialogoOperatoreObserver.OnIsDettaglioAttivitaOpenChanged += DialogoOperatoreObserver_OnIsDettaglioAttivitaOpenChanged;

		return base.OnInitializedAsync();
	}

	private async void AttivitaGridViewModel_NotifyStateChanged()
	{
		await InvokeAsync(StateHasChanged);

		if (AttivitaGridViewModel.Attivita != null)
			focusGrid = true;
	}

	private async void DialogoOperatoreObserver_OnIsDettaglioAttivitaOpenChanged()
	{
		if (AttivitaGridViewModel.Attivita != null && !DialogoOperatoreObserver.IsDettaglioAttivitaOpen)
		{
			await InvokeAsync(() =>
			{
				Grid.BeginUpdate();
				Grid.SelectedDataItem = null;
				Grid.EndUpdate();
			});

			focusGrid = true;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		if (focusGrid)
		{
			FocusGrid();
			focusGrid = false;
		}
	}

	void FocusGrid() => JSRuntime.InvokeVoidAsync("FocusElement", "grid-id");

	//Aggiunta di un commento di prova da committare
}

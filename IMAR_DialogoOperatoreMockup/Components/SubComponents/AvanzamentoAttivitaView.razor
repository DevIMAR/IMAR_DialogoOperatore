@using DevExpress.Blazor.Internal
@using IMAR_DialogoOperatore.ViewModels

@inject AvanzamentoAttivitaViewModel AvanzamentoAttivitaViewModel

<DxGridLayout CssClass="testo-medio">
	<Rows>
		<DxGridLayoutRow Height="auto" />
		<DxGridLayoutRow Height="auto" />
	</Rows>

	<Columns>
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
		<DxGridLayoutColumn />
	</Columns>

	<Items>
		<DxGridLayoutItem Row="0"
						  Column="0" ColumnSpan="2">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 mt-2">
					<label>Qt. PRODOTTA</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="0"
						  Column="3" ColumnSpan="2">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 mt-2">
					<label>Qt. SCARTATA</label>
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="0"
						  Column="6" ColumnSpan="2">
			<Template>
				<div class="d-flex justify-content-center align-items-center h-100 mt-2">
					FASE COMPLETATA
				</div>
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1"
						  Column="0" ColumnSpan="2">
			<Template>
				<DxSpinEdit @bind-Value="@(AvanzamentoAttivitaViewModel.QuantitaProdotta)"
							BindValueMode="BindValueMode.OnInput"
							ShowSpinButtons="false"
							AllowMouseWheel="false"
							CssClass="dxbl-text-edit mt-2"
							@ref="Prodotta"
							@onkeydown="HandleProdottaKeyPress"
							@onclick="@(() => Click.InvokeAsync())" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1"
						  Column="3" ColumnSpan="2">
			<Template>
				<DxSpinEdit @bind-Value="@(AvanzamentoAttivitaViewModel.QuantitaScartata)"
							BindValueMode="BindValueMode.OnInput"
							ShowSpinButtons="false"
							AllowMouseWheel="false"
							CssClass="dxbl-text-edit mt-2"
							@ref="Scartata"
							@onkeydown="HandleScartataKeyPress"
							@onclick="@(() => Click.InvokeAsync())" />
			</Template>
		</DxGridLayoutItem>

		<DxGridLayoutItem Row="1"
						  Column="6" ColumnSpan="2">
			<Template>
				<DxCheckBox CheckType="CheckType.Switch"
							@bind-Checked="@AvanzamentoAttivitaViewModel.IsFaseCompletabile"
							Alignment="CheckBoxContentAlignment.Center"
							SizeMode="SizeMode.Large"
							@ref="Saldo"
							@onkeydown="HandleSaldoKeyPress"
							@onclick="@(() => Click.InvokeAsync())"
							CssClass="mt-1" />
			</Template>
		</DxGridLayoutItem>
	</Items>
</DxGridLayout>

@code {
	[Parameter] public EventCallback DatiAvanzamentoInseriti { get; set; }

	public EventCallback Click { get; set; }

	public DxSpinEdit<uint?> Prodotta { get; set; }

	private DxSpinEdit<uint?> Scartata;
	private DxCheckBox<bool> Saldo;

	protected override Task OnInitializedAsync()
	{
		AvanzamentoAttivitaViewModel.NotifyStateChanged += AvanzamentoAttivitaViewModel_NotifyStateChanged;

		return base.OnInitializedAsync();
	}

	private async void AvanzamentoAttivitaViewModel_NotifyStateChanged()
	{
		await InvokeAsync(StateHasChanged);
	}

	private async void SetFocus(IFocusableEditor element)
	{
		try
		{
			await Task.Delay(10);
			await element.FocusAsync();
		}
		catch
		{

		}
	}

	private void HandleProdottaKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				SetFocus(Scartata);
				break;
		}
	}

	private void HandleScartataKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				SetFocus(Saldo);
				break;
		}
	}

	private async void HandleSaldoKeyPress(KeyboardEventArgs e)
	{
		switch (e.Key)
		{
			case "Enter":
				await DatiAvanzamentoInseriti.InvokeAsync();
				break;
			case "ArrowRight":
				AvanzamentoAttivitaViewModel.IsFaseCompletabile = true;
				break;
			case "ArrowLeft":
				AvanzamentoAttivitaViewModel.IsFaseCompletabile = false;
				break;
		}
	}
}
